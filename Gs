// ===============================================================
// กรุณาแก้ไข SHEET_ID ด้านล่างนี้เป็นของคุณ
// ===============================================================
const SHEET_ID = '1VIGo0oJZmJrwKpLIWP3rsMh0b8AUnFvtNnspJ5LCr38'; // <--- วาง Sheet ID ที่คัดลอกมาให้ถูกต้อง

/**
 * ฟังก์ชันหลักเมื่อเปิด Web App
 */
function doGet(e) {
  return HtmlService.createHtmlOutputFromFile('index')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
    .setTitle('Dashboard');
}

// --- ฟังก์ชันสำหรับตรวจสอบรหัสผ่านของเมนู ---
/**
 * ตรวจสอบรหัสผ่านที่ผู้ใช้ป้อนสำหรับเมนูที่ระบุ
 * @param {string} menuName - ชื่อของเมนูที่ต้องการตรวจสอบ
 * @param {string} password - รหัสผ่านที่ผู้ใช้ป้อน
 * @returns {Object} ผลลัพธ์การตรวจสอบ {success: true} หรือ {success: false, message: '...'}
 */
function verifyMenuPassword(menuName, password) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('Config');
    if (!sheet) { throw new Error("ไม่พบชีต 'Config' สำหรับการตรวจสอบรหัสผ่าน"); }

    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const currentMenuName = row[0];

      if (currentMenuName === menuName) {
        const isProtected = row[6]; // คอลัมน์ G (Password_Protect)
        const correctPassword = row[5]; // คอลัมน์ F (Password)

        if (isProtected === true) {
          if (password === correctPassword) {
            return { success: true };
          } else {
            return { success: false, message: 'รหัสผ่านไม่ถูกต้อง!' };
          }
        } else {
          return { success: true }; 
        }
      }
    }
    return { success: false, message: 'ไม่พบเมนูที่ระบุ' };
  } catch (e) {
    console.error('Error in verifyMenuPassword: ' + e.toString());
    return { success: false, message: 'เกิดข้อผิดพลาดฝั่งเซิร์ฟเวอร์' };
  }
}


// --- (ส่วนของการดึงข้อมูลแสดงผล) ---

/**
 * === (เวอร์ชันล่าสุด) ดึงข้อมูลเมนูและจัดโครงสร้างแบบมีเมนูย่อย (Parent/Sub-menu) ===
 */
function getMenuItems() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    const sheet = spreadsheet.getSheetByName('Config');
    if (!sheet) { throw new Error("ไม่พบชีตชื่อ 'Config'"); }
    if (sheet.getLastRow() < 2) { return { success: true, data: {} }; }
    
    // อ่านข้อมูล 8 คอลัมน์ (A ถึง H) เพื่อเอา Parent_Menu มาด้วย
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 8).getValues();
    const categorizedMenu = {};
    const allMenuItems = {}; // ใช้เก็บเมนูทั้งหมดเพื่อการค้นหา parent

    // Step 1: สร้าง Object ของเมนูทั้งหมดที่ Active ก่อน
    data
      .filter(row => row[3] === true && row[0]) // กรองเฉพาะเมนูที่ Active
      .forEach(row => {
        const menuName = row[0];
        allMenuItems[menuName] = {
          name: menuName,
          url: row[1],
          icon: row[2],
          isProtected: row[6] === true,
          category: row[4] || 'เมนูหลัก',
          parentMenu: row[7], // อ่านค่าจากคอลัมน์ H
          submenu: [] // เตรียม array สำหรับเมนูย่อย
        };
      });

    // Step 2: จัดโครงสร้างเมนูหลักและเมนูย่อย
    for (const menuName in allMenuItems) {
      const item = allMenuItems[menuName];
      if (item.parentMenu && allMenuItems[item.parentMenu]) {
        // ถ้ามี Parent และ Parent นั้นมีอยู่จริง => มันคือเมนูย่อย
        // ให้เอาตัวเองไปใส่ใน submenu ของ Parent
        allMenuItems[item.parentMenu].submenu.push(item);
      } else {
        // ถ้าไม่มี Parent => มันคือเมนูหลัก
        // จัดกลุ่มตาม Category
        const category = item.category;
        if (!categorizedMenu[category]) {
          categorizedMenu[category] = [];
        }
        categorizedMenu[category].push(item);
      }
    }

    if (Object.keys(categorizedMenu).length === 0) { 
      throw new Error("ไม่พบเมนูที่เปิดใช้งาน (Active=TRUE) ในชีต 'Config'"); 
    }
    
    return { success: true, data: categorizedMenu };
  } catch (e) {
    console.error('Error in getMenuItems: ' + e.toString());
    return { success: false, message: e.toString() };
  }
}

/**
 * ฟังก์ชันสำหรับดึงข้อมูลจากชีต 'Dashboard' และเพิ่มการ์ดนับจำนวนเมนูอัตโนมัติ
 */
function getDashboardData() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    
    const dashboardSheet = spreadsheet.getSheetByName('Dashboard');
    if (!dashboardSheet) { throw new Error("ไม่พบชีตชื่อ 'Dashboard'"); }
    
    const data = dashboardSheet.getRange(2, 1, dashboardSheet.getLastRow() - 1, 3).getValues();
    let dashboardCards = [];
    let tempCard = {};
    data.forEach(row => {
      if (row[0]) {
        const key = row[0];
        const type = key.endsWith('_title') ? 'title' : 'value';
        const baseKey = key.replace(/_title|_value/, '');

        if (!tempCard[baseKey]) {
          tempCard[baseKey] = {};
        }
        tempCard[baseKey][type] = { value1: row[1], value2: row[2] };
      }
    });
    
    for (const key in tempCard) {
      dashboardCards.push({ title: tempCard[key].title, value: tempCard[key].value });
    }

    const configSheet = spreadsheet.getSheetByName('Config');
    if (configSheet && configSheet.getLastRow() > 1) {
      const menuData = configSheet.getRange(2, 4, configSheet.getLastRow() - 1, 1).getValues();
      const activeMenuCount = menuData.filter(row => row[0] === true).length;
      
      const menuCountCard = {
        title: { value1: 'เมนูทั้งหมด', value2: 'fa-list-check' },
        value: { value1: activeMenuCount, value2: 'bg-blue' }
      };
      
      dashboardCards.unshift(menuCountCard);
    }
    
    return { success: true, data: dashboardCards };

  } catch (e) {
    console.error('Error in getDashboardData: ' + e.toString());
    return { success: false, message: e.toString() };
  }
}

/**
 * ฟังก์ชันสำหรับดึงข้อมูลกราฟทั้งหมดจากชีต
 */
function getAllChartData() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    const allData = {};

    const barSheet = spreadsheet.getSheetByName('Chart_Bar');
    if (barSheet && barSheet.getLastRow() > 1) {
      const barData = barSheet.getDataRange().getValues();
      const headers = barData.shift();
      allData.bar = {
        labels: barData.map(row => row[0]),
        datasets: [
          { label: headers[1], data: barData.map(row => row[1]), backgroundColor: 'rgba(59, 130, 246, 0.7)' },
          { label: headers[2], data: barData.map(row => row[2]), backgroundColor: 'rgba(147, 197, 253, 0.7)' }
        ]
      };
    }

    const pieSheet = spreadsheet.getSheetByName('Chart_Pie');
    if (pieSheet && pieSheet.getLastRow() > 1) {
      const pieData = pieSheet.getDataRange().getValues();
      pieData.shift();
      allData.pie = {
        labels: pieData.map(row => row[0]),
        data: pieData.map(row => row[1])
      };
    }

    const lineSheet = spreadsheet.getSheetByName('Chart_Line');
    if (lineSheet && lineSheet.getLastRow() > 1) {
      const lineData = lineSheet.getDataRange().getValues();
      const headers = lineData.shift();
      allData.line = {
        labels: lineData.map(row => row[0]),
        datasets: [
          { label: headers[1], data: lineData.map(row => row[1]), fill: false, borderColor: '#0ea5e9', tension: 0.2 }
        ]
      };
    }

    return { success: true, data: allData };
  } catch (e) {
    console.error('Error in getAllChartData: ' + e.toString());
    return { success: false, message: e.toString() };
  }
}

/**
 * ฟังก์ชันสำหรับส่งข้อความที่จะแสดงในส่วนท้ายของเว็บแอป (Footer)
 */
function getFooterDescription() {
  try {
    const footerText = '© 2025 คลังแสงระบบเว็บแอพ | พัฒนาโดย แผนกนวัตกรรมดิจิทัล';
    return { success: true, data: footerText };
  } catch (e) {
    return { success: false, message: e.toString() };
  }
}
