<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base target="_top">
    <title>Dashboard</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --sidebar-width: 260px;
            --header-height: 60px;
            --sidebar-bg: #1f2937; 
            --sidebar-text: #d1d5db; 
            --sidebar-active-bg: #3b82f6; 
            --sidebar-submenu-bg: rgba(0,0,0,0.15);
            --sidebar-submenu-open-bg: #2c3a4f;
            --main-bg: #f9fafb;
            --card-bg: #ffffff; 
            --text-primary: #111827; 
            --text-secondary: #6b7280; 
            --border-color: #e5e7eb;
            --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        body { margin: 0; font-family: 'Kanit', sans-serif; background-color: var(--main-bg); color: var(--text-primary); display: flex; overflow-x: hidden; position: relative; }

        .sidebar { width: var(--sidebar-width); background-color: var(--sidebar-bg); color: var(--sidebar-text); display: flex; flex-direction: column; height: 100vh; position: fixed; top: 0; left: 0; flex-shrink: 0; transition: transform 0.3s ease-in-out; z-index: 1000; overflow-y: auto;}
        .sidebar-header { display: flex; align-items: center; padding: 1.25rem; border-bottom: 1px solid #374151; flex-shrink: 0;}
        .sidebar-header .logo { width: 32px; height: 32px; background-color: #34d399; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; margin-right: 12px; }
        .sidebar-header h2 { margin: 0; font-size: 1rem; font-weight: 500; }
        .sidebar-nav { list-style: none; padding: 0; margin: 1rem 0; }
        .sidebar-nav li a { display: flex; align-items: center; padding: 0.9rem 1.25rem; color: var(--sidebar-text); text-decoration: none; transition: background-color 0.2s, color 0.2s; font-weight: 400; cursor: pointer; position: relative;}
        .sidebar-nav li a i { width: 20px; margin-right: 15px; text-align: center; }
        .sidebar-nav li a:hover { background-color: #374151; }
        .sidebar-nav li.active > a { background-color: var(--sidebar-active-bg); color: white; font-weight: 500; }
        #sidebar-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; }
        
        /* === CSS สำหรับหัวข้อหมวดหมู่ที่พับได้ === */
        .sidebar-category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1.25rem 0.5rem 1.25rem;
            margin-top: 1rem;
            font-size: 0.75rem;
            font-weight: 500;
            color: #9ca3af;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .sidebar-category-header:hover {
            background-color: #374151;
        }
        .sidebar-category-header .arrow {
            transition: transform 0.2s ease-in-out;
            transform: rotate(0deg);
        }
        .category-group.open > .sidebar-category-header .arrow {
            transform: rotate(180deg);
        }
        li.category-group:first-of-type > .sidebar-category-header {
             margin-top: 0;
        }

        /* === CSS สำหรับกล่องเก็บเมนูในแต่ละหมวดหมู่ === */
        .category-menu-items {
            list-style: none;
            padding: 0;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease-in-out;
        }
        .category-group.open > .category-menu-items {
            max-height: 2000px; /* ตั้งค่าความสูงให้เพียงพอ */
        }
        
        /* === CSS สำหรับเมนูย่อยแบบพับได้ (Sub-menu) === */
        .sidebar-nav li.has-submenu > a .arrow { position: absolute; right: 1.25rem; top: 50%; transform: translateY(-50%) rotate(0deg); transition: transform 0.2s ease-in-out; }
        .sidebar-nav li.has-submenu.open > a .arrow { transform: translateY(-50%) rotate(90deg); }
        .sidebar-nav li.has-submenu.open > a { background-color: var(--sidebar-submenu-open-bg); }

        .submenu { list-style: none; padding-left: 0; max-height: 0; overflow: hidden; transition: max-height 0.3s ease-in-out; background-color: var(--sidebar-submenu-bg);}
        .submenu > li > a { padding-left: 3.2rem; font-size: 0.9rem;}
        .submenu .submenu > li > a { padding-left: 4.5rem; background-color: rgba(0,0,0,0.1); }
        .sidebar-nav li.has-submenu.open > .submenu { max-height: 1000px; }


        /* === CSS สำหรับหัวข้อหมวดหมู่สไตล์ใหม่ (เท่ๆ) === */
        .sidebar-category-header {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.25rem; /* ปรับ Padding เล็กน้อย */
            border-left: 3px solid transparent; /* เพิ่มเส้นขอบใสๆ ไว้ด้านซ้าย */
            transition: all 0.2s ease-in-out; /* ทำให้การเปลี่ยนแปลงสมูท */
        }

        .sidebar-category-header:hover {
            background-color: #374151;
            border-left-color: var(--sidebar-active-bg); /* เมื่อเมาส์ชี้ ให้เส้นขอบมีสี */
        }

        /* สไตล์เมื่อหมวดหมู่ถูกเปิด */
        .category-group.open > .sidebar-category-header {
            background-color: var(--sidebar-submenu-open-bg);
            color: #e5e7eb;
            font-weight: 500;
            border-left-color: var(--sidebar-active-bg);
        }

        .sidebar-category-header .category-icon {
            width: 20px;
            margin-right: 15px;
            text-align: center;
            color: #9ca3af;
            transition: color 0.2s;
        }

        /* เปลี่ยนสีไอคอนเมื่อหมวดหมู่ถูกเปิด */
        .category-group.open > .sidebar-category-header .category-icon {
            color: var(--sidebar-active-bg);
        }

        .sidebar-category-header .category-title {
            flex-grow: 1; /* ดันลูกศรไปทางขวา */
        }


        .main-content { width: 100%; flex-grow: 1; padding: 1.5rem; height: 100vh; overflow-y: auto; margin-left: var(--sidebar-width); transition: margin-left 0.3s ease-in-out; }
        .main-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem; }
        .main-header .title-group { display: flex; align-items: center; gap: 1rem; color: var(--text-secondary); font-size: 1.1rem; }
        .main-header .breadcrumbs { font-size: 0.9rem; color: var(--text-secondary); }
        .hamburger-menu { cursor: pointer; }
        .page-title { font-size: 1.75rem; font-weight: 600; margin-bottom: 1.5rem; }
        
        #iframe-wrapper { width: 100%; height: calc(100vh - 220px); }
        #content-iframe { width: 100%; height: 100%; border: none; }
        .kpi-cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 1.5rem; }
        .card { background-color: var(--card-bg); border: 1px solid var(--border-color); border-radius: 0.5rem; box-shadow: var(--shadow); padding: 1.25rem; display: flex; align-items: center; }
        .card .icon-container { width: 48px; height: 48px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 1rem; font-size: 1.5rem; color: #fff; }
        .card .icon-container.bg-blue { background-color: #60a5fa; } 
        .card .icon-container.bg-green { background-color: #4ade80; } 
        .card .icon-container.bg-sky { background-color: #38bdf8; } 
        .card .icon-container.bg-yellow { background-color: #facc15; }
        .card .card-content .title { color: var(--text-secondary); font-size: 0.9rem; margin: 0 0 4px 0; }
        .card .card-content .value { font-size: 1.75rem; font-weight: 600; color: var(--text-primary); }
        .charts-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 1.5rem; }
        .chart-card { background-color: var(--card-bg); border: 1px solid var(--border-color); border-radius: 0.5rem; box-shadow: var(--shadow); padding: 1.25rem; }
        .chart-card.full-width { grid-column: 1 / -1; }
        .chart-header { display: flex; align-items: center; color: var(--text-primary); font-weight: 500; margin-bottom: 1.25rem; padding-bottom: 0.75rem; border-bottom: 1px solid var(--border-color); }
        .chart-header i { margin-right: 0.75rem; color: var(--text-secondary); }
        #error-message-box { font-size: 1rem; color: #ef4444; background-color: #fee2e2; border: 1px solid #fca5a5; padding: 1.5rem; border-radius: 0.5rem; font-family: monospace; }
        
        #app-footer { text-align: center; padding: 1rem; margin-top: 1.5rem; font-size: 0.85rem; color: var(--text-secondary); border-top: 1px solid var(--border-color); }
        
        @media (max-width: 992px) {
            .sidebar { transform: translateX(-100%); }
            .main-content { margin-left: 0; }
            body.sidebar-open .sidebar { transform: translateX(0); }
            body.sidebar-open #sidebar-overlay { display: block; }
        }
    </style>
</head>
<body>
    <nav class="sidebar">
        <div>
            <div class="sidebar-header"> 
                <div class="logo"><i class="fa-solid fa-chart-simple"></i></div> 
                <h2>Dashboard</h2> 
            </div>
            <ul id="sidebar-menu-list" class="sidebar-nav"></ul>
        </div>
    </nav>
    <div id="sidebar-overlay" onclick="toggleSidebar()"></div>
    <main class="main-content">
         <header class="main-header">
             <div class="title-group"> <i class="fa-solid fa-bars hamburger-menu" onclick="toggleSidebar()"></i> <span>หน้าหลัก</span> </div>
            <div id="breadcrumbs" class="breadcrumbs"></div>
        </header>
        <h1 id="page-title" class="page-title"></h1>
        <div id="error-message-box" style="display: none;"></div>
        <div id="dashboard-view" style="display: none;">
            <section id="kpi-cards-container" class="kpi-cards"></section>
            <section class="charts-grid">
                <div class="chart-card">
                    <div class="chart-header"><i class="fa-solid fa-chart-column"></i>กราฟแท่ง</div>
                    <canvas id="barChart"></canvas>
                </div>
                <div class="chart-card">
                    <div class="chart-header"><i class="fa-solid fa-chart-pie"></i>กราฟวงกลม</div>
                    <canvas id="pieChart"></canvas>
                </div>
                <div class="chart-card full-width">
                    <div class="chart-header"><i class="fa-solid fa-chart-line"></i>กราฟเส้น</div>
                    <canvas id="lineChart"></canvas>
                </div>
            </section>
        </div>
        <div id="iframe-wrapper" style="display: none;">
            <iframe id="content-iframe" src="about:blank" scrolling="yes"></iframe>
        </div>
        
        <footer id="app-footer"></footer>
    </main>
    <script>
        function toggleSidebar() { 
            document.body.classList.toggle('sidebar-open'); 
        }
        
        function loadContent(clickedElement, menuName, url) {
            document.querySelectorAll('.sidebar-nav li.active').forEach(li => li.classList.remove('active'));
            
            let currentLi = clickedElement.parentElement;
            currentLi.classList.add('active');

            // Find parent category and add 'active' class if it exists
            const parentCategory = currentLi.closest('.category-group');
            if (parentCategory) {
                 // Remove active from other categories if needed, though not strictly necessary
                 document.querySelectorAll('.category-group.active').forEach(cat => cat.classList.remove('active'));
                 parentCategory.classList.add('active');
            }


            if (window.innerWidth <= 992) { 
                document.body.classList.remove('sidebar-open'); 
            }
            
            const dashboardView = document.getElementById('dashboard-view');
            const iframeWrapper = document.getElementById('iframe-wrapper');
            const iframe = document.getElementById('content-iframe');
            const pageTitle = document.getElementById('page-title');
            const breadcrumbs = document.getElementById('breadcrumbs');
            
            pageTitle.textContent = menuName;
            breadcrumbs.textContent = `หน้าหลัก / ${menuName}`;

            if (url === 'dashboard') {
                dashboardView.style.display = 'block';
                iframeWrapper.style.display = 'none';
            } else {
                Swal.fire({
                    title: 'กำลังโหลดข้อมูล...',
                    text: `กำลังเปิดหน้า ${menuName}`,
                    allowOutsideClick: false,
                    didOpen: () => { Swal.showLoading(); }
                });
                iframe.onload = () => { Swal.close(); };
                dashboardView.style.display = 'none';
                iframeWrapper.style.display = 'block';
                iframe.src = url;
            }
        }

        function handleMenuClick(clickedElement, menuName, url, isProtected, hasSubmenu) {
            if (hasSubmenu) {
                const parentLi = clickedElement.parentElement;
                parentLi.classList.toggle('open');
                return;
            }

            if (isProtected) {
                Swal.fire({
                    title: `ใส่รหัสผ่านสำหรับเมนู "${menuName}"`,
                    input: 'password',
                    inputPlaceholder: 'กรุณาใส่รหัสผ่าน',
                    showCancelButton: true,
                    confirmButtonText: 'ยืนยัน',
                    cancelButtonText: 'ยกเลิก',
                    showLoaderOnConfirm: true,
                    preConfirm: (password) => {
                        return new Promise((resolve) => {
                            google.script.run
                                .withSuccessHandler(response => {
                                    if (!response.success) Swal.showValidationMessage(response.message);
                                    resolve(response);
                                })
                                .withFailureHandler(error => {
                                    Swal.showValidationMessage(`เกิดข้อผิดพลาด: ${error.message}`);
                                    resolve({success: false});
                                })
                                .verifyMenuPassword(menuName, password);
                        });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed && result.value.success) {
                        loadContent(clickedElement, menuName, url);
                    }
                });
            } else {
                loadContent(clickedElement, menuName, url);
            }
        }
        
        function createMenuTree(menuItems, parentElement) {
            menuItems.forEach(item => {
                const hasSubmenu = item.submenu && item.submenu.length > 0;
                const li = document.createElement('li');
                if(hasSubmenu) {
                    li.classList.add('has-submenu');
                }

                const a = document.createElement('a');
                let iconHtml = `<i class="fa-solid ${item.icon || 'fa-link'}"></i>`;
                let arrowHtml = hasSubmenu ? `<i class="fa-solid fa-chevron-right arrow"></i>` : '';
                a.innerHTML = `${iconHtml} <span>${item.name}</span> ${arrowHtml}`;
                
                const url = (item.url && item.url.trim() !== '') ? item.url : '#';
                a.onclick = () => handleMenuClick(a, item.name, url, item.isProtected, hasSubmenu);
                
                li.appendChild(a);

                if (hasSubmenu) {
                    const submenuUl = document.createElement('ul');
                    submenuUl.className = 'submenu';
                    createMenuTree(item.submenu, submenuUl); 
                    li.appendChild(submenuUl);
                }
                parentElement.appendChild(li);
                
                if (item.url === 'dashboard') {
                   setTimeout(() => handleMenuClick(a, item.name, item.url, item.isProtected, false), 0);
                }
            });
        }
        
        function handleServerResponse(response) {
            const menuList = document.getElementById('sidebar-menu-list');
            const errorBox = document.getElementById('error-message-box');

            if (response.success && response.data && Object.keys(response.data).length > 0) {
                errorBox.style.display = 'none';
                menuList.innerHTML = '';
                
                const menuData = response.data;
                
                for (const categoryName in menuData) {
                    const categoryGroupLi = document.createElement('li');
                    categoryGroupLi.className = 'category-group open'; // ให้หมวดหมู่เปิดเป็นค่าเริ่มต้น

                    const categoryHeader = document.createElement('div');
                    categoryHeader.className = 'sidebar-category-header';
                    
                    // เพิ่มไอคอน fa-layer-group เข้าไปหน้าชื่อหมวดหมู่
                    categoryHeader.innerHTML = `
                        <i class="fa-solid fa-layer-group category-icon"></i>
                        <span class="category-title">${categoryName}</span>
                        <i class="fa-solid fa-chevron-down arrow"></i>
                    `;
                    
                    categoryHeader.onclick = () => categoryGroupLi.classList.toggle('open');
                    
                    const itemsUl = document.createElement('ul');
                    itemsUl.className = 'category-menu-items';
                    
                    createMenuTree(menuData[categoryName], itemsUl);
                    
                    categoryGroupLi.appendChild(categoryHeader);
                    categoryGroupLi.appendChild(itemsUl);
                    menuList.appendChild(categoryGroupLi);
                }
            } else {
                errorBox.style.display = 'block';
                errorBox.textContent = `เกิดข้อผิดพลาด: ${response.message || 'ไม่พบข้อมูลเมนู'}`;
                document.getElementById('page-title').textContent = 'Error!';
            }
        }
        
        function populateDashboard(dashboardData) {
            if (!dashboardData || !dashboardData.success) { return; }
            const cards = dashboardData.data;
            const container = document.getElementById('kpi-cards-container');
            container.innerHTML = '';
            cards.forEach(card => {
                if (card.title && card.value) {
                    container.innerHTML += `<div class="card"><div class="icon-container ${card.value.value2 || 'bg-blue'}"><i class="fa-solid ${card.title.value2 || 'fa-question-circle'}"></i></div><div class="card-content"><p class="title">${card.title.value1}</p><p class="value">${card.value.value1}</p></div></div>`;
                }
            });
        }

        function initializeCharts(response) {
            if (!response.success) { 
                console.error("ไม่สามารถโหลดข้อมูลกราฟได้:", response.message); 
                return; 
            }
            const chartData = response.data;
            if (chartData.bar) {
                const barCtx = document.getElementById('barChart');
                if (window.myBarChart) window.myBarChart.destroy();
                window.myBarChart = new Chart(barCtx, { type: 'bar', data: chartData.bar, options: { responsive: true, scales: { y: { beginAtZero: true } } } });
            }
            if (chartData.pie) {
                const pieCtx = document.getElementById('pieChart');
                if (window.myPieChart) window.myPieChart.destroy();
                window.myPieChart = new Chart(pieCtx, { type: 'pie', data: { labels: chartData.pie.labels, datasets: [{ data: chartData.pie.data, backgroundColor: ['#3b82f6', '#16a34a', '#ef4444', '#f59e0b', '#6366f1', '#8b5cf6'], borderWidth: 1 }] }, options: { responsive: true, plugins: { legend: { position: 'top' } } } });
            }
            if (chartData.line) {
                const lineCtx = document.getElementById('lineChart');
                if (window.myLineChart) window.myLineChart.destroy();
                window.myLineChart = new Chart(lineCtx, { type: 'line', data: chartData.line, options: { responsive: true, scales: { y: { beginAtZero: false } } } });
            }
        }
        
        function populateFooter(response) {
            if (response.success && response.data) {
                const footer = document.getElementById('app-footer');
                footer.textContent = response.data;
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            if (window.innerWidth > 992) { 
                document.body.classList.add('sidebar-open'); 
            } else { 
                document.body.classList.remove('sidebar-open'); 
            }

            google.script.run.withSuccessHandler(handleServerResponse).getMenuItems();
            google.script.run.withSuccessHandler(populateDashboard).getDashboardData();
            google.script.run.withSuccessHandler(initializeCharts).getAllChartData();
            google.script.run.withSuccessHandler(populateFooter).getFooterDescription();
        });
    </script>
</body>
</html>
